/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GamePlay {
    #[serde(rename = "players", skip_serializing_if = "Option::is_none")]
    pub players: Option<Vec<crate::models::GamePlayPlayersInner>>,
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Box<crate::models::GamePlayResult>>,
    #[serde(rename = "about", skip_serializing_if = "Option::is_none")]
    pub about: Option<Box<crate::models::GamePlayAbout>>,
    #[serde(rename = "coordinates", skip_serializing_if = "Option::is_none")]
    pub coordinates: Option<Box<crate::models::GamePlayCoordinates>>,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<Box<crate::models::GamePlayTeam>>,
}

impl GamePlay {
    pub fn new() -> GamePlay {
        GamePlay {
            players: None,
            result: None,
            about: None,
            coordinates: None,
            team: None,
        }
    }
}


